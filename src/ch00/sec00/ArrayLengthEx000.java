package ch00.sec00;

public class ArrayLengthEx000 {

	public static void main(String[] args) {
		// 2차원 배열 생성
		int[][] intArray = new int[5][];  // 5행의 1차원 배열을 가지는 2차원 배열 생성
		intArray[0] = new int[5];  // 첫 번째 행의 1차원 배열 생성
		intArray[1] = new int[5];  // 두 번째 행의 1차원 배열 생성
		intArray[2] = new int[5];  // 세 번째 행의 1차원 배열 생성
		intArray[3] = new int[5];  // 네 번째 행의 1차원 배열 생성
		intArray[4] = new int[5];  // 다섯 번째 행의 1차원 배열 생성

		// 배열 초기화
		for (int i = 0; i < intArray.length; i++) {
		    for (int j = 0; j < intArray[i].length; j++) {
		        // 짝수 행일 때는 행 인덱스(i) * 5와 열 인덱스(j)의 합 할당
		        // 홀수 행일 때는 행 인덱스(i) * 5와 열 인덱스(j)의 차를 할당
		        intArray[i][j] = (i % 2 == 0) ? (i * 5) + j + 1 : (i + 1) * 5 - j;
		    }
		}

		// 배열의 값 출력
		for (int i = 0; i < intArray.length; i++) {
		    for (int j = 0; j < intArray[i].length; j++) {
		        // 배열의 각 요소 값을 출력
		        System.out.print(intArray[i][j] + " ");
		    }
		    // 각 행의 끝에 개행 추가
		    System.out.println();
		}
//		for 루프의 이 부분은 2차원 배열의 행에 대한 루프입니다. intArray.length는 2차원 배열 intArray의 행의 개수를 나타냅니다. 
//		따라서 이 부분은 배열의 각 행을 순회하는 루프입니다.
//		여기서 i는 현재 순회 중인 행의 인덱스를 나타냅니다. 루프가 처음 시작할 때 i는 0이며, 행의 개수에 도달할 때까지 반복됩니다.
//		루프 내부에서는 2차원 배열의 각 행에 대한 작업이 이루어집니다. 이것은 2차원 배열을 초기화하거나 특정 작업을 수행하는 등의 용도로 사용될 수 있습니다.
// 		코드 예제에서는 각 행을 초기화하는 작업이 이루어졌습니다.
//		예를 들어, intArray[i]는 intArray의 i번째 행을 나타냅니다. 이 행에 대한 작업은 루프의 다음 부분에서 이루어집니다.
//		다시 말하면, 이 부분은 2차원 배열의 각 행을 순회하는 역할을 합니다. 이 루프를 통해 2차원 배열에 대한 작업을 행 단위로 수행할 수 있습니다.
//		for 루프의 이 부분은 내부에 있는 1차원 배열의 열에 대한 루프입니다. 
//		intArray[i].length는 현재 순회 중인 행의 1차원 배열의 길이(열의 개수)를 나타냅니다.
		
//		여기서 j는 현재 순회 중인 열의 인덱스를 나타냅니다. 루프가 처음 시작할 때 j는 0이며, 행의 1차원 배열의 길이에 도달할 때까지 반복됩니다.
//		루프 내부에서는 1차원 배열의 각 열에 대한 작업이 이루어집니다.
// 		이것은 2차원 배열의 각 요소에 값을 할당하거나 다른 작업을 수행하는 등의 용도로 사용될 수 있습니다. 
//		코드 예제에서는 각 요소에 값을 할당하는 작업이 이루어졌습니다.
//		예를 들어, intArray[i][j]는 intArray의 i번째 행에서 j번째 열의 요소를 나타냅니다. 이 위치에 대한 작업은 루프의 다음 부분에서 이루어집니다.
//		이 부분은 1차원 배열의 열에 대한 루프를 통해 작업을 수행하는 역할을 합니다. 1차원 배열의 각 열을 순회하면서 해당 작업을 수행할 수 있습니다.
	}

}
